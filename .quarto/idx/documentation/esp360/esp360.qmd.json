{"title":"ESP 360 Remote","markdown":{"yaml":{"title":"ESP 360 Remote","subtitle":"An all-in-one remote based on the ESP32-WROOM-32E","format":{"html":{"toc":true,"toc-location":"left","toc-expand":2,"smooth-scroll":true,"title-block-banner":false}}},"headingText":"Installation","containsRefs":false,"markdown":"\n\n- ## ESP 360 Remote on [CrowdSupply](https://www.crowdsupply.com/aaelectronics/esp-360-remote)\n\n- ## ESP 360 Remote on [Discord](https://discord.gg/PsrK3KDkRy)\n\n\nThis board boasts a RF transmitter and receiver, while IR LEDs are arranged in a circle to provide omnidirectional coverage. Additionally, it comes equipped with a temperature and humidity sensor, as well as an ambient light sensor. To top it off, the board can be powered and programmed through a USB Type-C port, which is ESD protected. Based on the ESP32-WROOM-32E, this board can be effortlessly configured with ESPHome, allowing for seamless control via Home Assistant.\nYou can swap the 433MHz modules with 315MHz ones because the SRX/STX882 modules come in both version with the same pinout, so you can choose which one fit your needs the best\n\n![](/assets/esp360/photo1.jpg){width=4in fig-align=\"center\"}\n\nI think the form factor it's nice because there are two round stackable layers. \n\nThe first layer of the board includes the ESP32, the two sensors, the buck converter and the USB circuitry.\n\n![](/assets/esp360/bottom.jpg){width=3in fig-align=\"center\"}\n\nThe second layer of the board features the IR leds and receiver and the RF modules.\n\n![](/assets/esp360/top.jpg){width=3in fig-align=\"center\"}\n\nInside the enclosure just stack the two layers using the x8 female header near the ESP:\n\n::: {layout-ncol=2}\n![](/assets/esp360/assembled_both.jpg){height=2in}\n\n![](/assets/esp360/assembled_bottom.jpg){height=2in}\n:::\n\nThen screw the top part and turn the board on!\n\n  ![](/assets/esp360/assembled.jpg){width=3in fig-align=\"center\"}\n\nNow you can also program the board with the USB-C. I suggest to use ESPHOME beacuse it's super easy to setup and to integrate with Home Assistant\n\nOnce you receive the ESP 360 Remote, if you don't have a running server of Home Assistant, you will need to follow the instructions [here](install.qmd) to use the board as a \"standalone\" product, otherwise just follow the [quick start guide](quickstart.qmd).\n\n# Home Assistant Integration\n\nESP 360 REMOTE is designed to be fully integrated into Home Assistant and leverage the capabilities provided by ESPHome. If you decide to use the configuration file provided in this repo, you will see these exposed entities:\n\n![](/assets/esp360/esp-360-Home-Assistant.jpg){width=3in fig-align=\"center\"}\n\n## Transmitting signals\n\nThanks to the ease of use of ESPHome, you can create custom switches or integrate existing components (see https://esphome.io/components/climate/climate_ir.html) by directly modifying the yaml file, and all of this will be immediately visible on Home Assistant. Alternatively, if you want to take an even simpler route, you can use two integrated services to send raw IR and RF signals:\n\n![](/assets/esp360/services.png){width=5in fig-align=\"center\"}\n\nThis way you won't need to tinker with the ESPHome configuration and you'll be able to send signals directly from your automations!\n\n## Receiving signals\n\nWhen the board receives an RF signal, the **esphome.rf_code_received** event will be triggered in Home Assistant. From there, you can directly see the protocol and code of the received signal. The same feature will soon be available for the infrared receiver as well.\n\n![](/assets/esp360/event.jpg){width=5in fig-align=\"center\"}\n\nIn this case, I received the code 721136 (10110000000011110000 in binary) and protocol 2\n\n## SmartIR Integration\n\nESPHome ensures compatibility with the widely-used SmartIR custom component for Home Assistant, thanks to its built-in support for transmitting raw signals. If you already have a SmartIR configuration in place, all you need to do is specify the appropriate service for transmitting signals and a code that is compatible with ESPHome. Here's an example of what your configuration.yaml file could look like:\n\n```\nsmartir:\n\nclimate:\n  - platform: smartir\n    name: Livingroom AC\n    unique_id: livingroom_ac\n    device_code: 7065\n    controller_data: esp360remote_send_ir_raw\n    temperature_sensor: sensor.living_room_temperature\n```\nFor more information, check out the [SmartIR repo](https://github.com/smartHomeHub/SmartIR).\n\n# Dimensions\n\nThe board is remarkably compact, measuring just 5cm in diameter and 3.5cm in height without the enclosure. This small form factor makes it a perfect fit for any space. To put its size into perspective, it's smaller than the Broadlink RM3 Mini, which is the only device I have available for comparison.\n\n\n![](/assets/esp360/vs_broadlink.jpeg){width=5in fig-align=\"center\"}\n\n\n# Enclosure\n\nWithin this repository, you can also access the two STL files for the enclosure, which enables you to print it in your preferred color to match its intended location. The pre-designed enclosure includes openings near the USB-C port and two built-in sensors to optimize airflow and cool down the temperature sensor. The top part of the enclosure can be screwed on, so there's no need for additional screws or components. I've only tested printing with light-colored PLA, and the IR transmission was not impacted at all. However, I can't make any claims about other materials or dark colors.\n\n![](/assets/esp360/without_top.jpeg){fig-align=\"center\"}\n\n# OSHWA Certification\nIn the end, the project also has the OSHWA certification with UID IT000012, so it's completely open source!\n\n\n![](/assets/esp360/oshwa.jpeg){width=3in fig-align=\"center\"}\n\n# License\n\n![](/assets/esp360/license.jpg){width=2in fig-align=\"center\"}\n\n\n","srcMarkdownNoYaml":"\n\n- ## ESP 360 Remote on [CrowdSupply](https://www.crowdsupply.com/aaelectronics/esp-360-remote)\n\n- ## ESP 360 Remote on [Discord](https://discord.gg/PsrK3KDkRy)\n\n\nThis board boasts a RF transmitter and receiver, while IR LEDs are arranged in a circle to provide omnidirectional coverage. Additionally, it comes equipped with a temperature and humidity sensor, as well as an ambient light sensor. To top it off, the board can be powered and programmed through a USB Type-C port, which is ESD protected. Based on the ESP32-WROOM-32E, this board can be effortlessly configured with ESPHome, allowing for seamless control via Home Assistant.\nYou can swap the 433MHz modules with 315MHz ones because the SRX/STX882 modules come in both version with the same pinout, so you can choose which one fit your needs the best\n\n![](/assets/esp360/photo1.jpg){width=4in fig-align=\"center\"}\n\nI think the form factor it's nice because there are two round stackable layers. \n\nThe first layer of the board includes the ESP32, the two sensors, the buck converter and the USB circuitry.\n\n![](/assets/esp360/bottom.jpg){width=3in fig-align=\"center\"}\n\nThe second layer of the board features the IR leds and receiver and the RF modules.\n\n![](/assets/esp360/top.jpg){width=3in fig-align=\"center\"}\n\nInside the enclosure just stack the two layers using the x8 female header near the ESP:\n\n::: {layout-ncol=2}\n![](/assets/esp360/assembled_both.jpg){height=2in}\n\n![](/assets/esp360/assembled_bottom.jpg){height=2in}\n:::\n\nThen screw the top part and turn the board on!\n\n  ![](/assets/esp360/assembled.jpg){width=3in fig-align=\"center\"}\n\nNow you can also program the board with the USB-C. I suggest to use ESPHOME beacuse it's super easy to setup and to integrate with Home Assistant\n\n# Installation\nOnce you receive the ESP 360 Remote, if you don't have a running server of Home Assistant, you will need to follow the instructions [here](install.qmd) to use the board as a \"standalone\" product, otherwise just follow the [quick start guide](quickstart.qmd).\n\n# Home Assistant Integration\n\nESP 360 REMOTE is designed to be fully integrated into Home Assistant and leverage the capabilities provided by ESPHome. If you decide to use the configuration file provided in this repo, you will see these exposed entities:\n\n![](/assets/esp360/esp-360-Home-Assistant.jpg){width=3in fig-align=\"center\"}\n\n## Transmitting signals\n\nThanks to the ease of use of ESPHome, you can create custom switches or integrate existing components (see https://esphome.io/components/climate/climate_ir.html) by directly modifying the yaml file, and all of this will be immediately visible on Home Assistant. Alternatively, if you want to take an even simpler route, you can use two integrated services to send raw IR and RF signals:\n\n![](/assets/esp360/services.png){width=5in fig-align=\"center\"}\n\nThis way you won't need to tinker with the ESPHome configuration and you'll be able to send signals directly from your automations!\n\n## Receiving signals\n\nWhen the board receives an RF signal, the **esphome.rf_code_received** event will be triggered in Home Assistant. From there, you can directly see the protocol and code of the received signal. The same feature will soon be available for the infrared receiver as well.\n\n![](/assets/esp360/event.jpg){width=5in fig-align=\"center\"}\n\nIn this case, I received the code 721136 (10110000000011110000 in binary) and protocol 2\n\n## SmartIR Integration\n\nESPHome ensures compatibility with the widely-used SmartIR custom component for Home Assistant, thanks to its built-in support for transmitting raw signals. If you already have a SmartIR configuration in place, all you need to do is specify the appropriate service for transmitting signals and a code that is compatible with ESPHome. Here's an example of what your configuration.yaml file could look like:\n\n```\nsmartir:\n\nclimate:\n  - platform: smartir\n    name: Livingroom AC\n    unique_id: livingroom_ac\n    device_code: 7065\n    controller_data: esp360remote_send_ir_raw\n    temperature_sensor: sensor.living_room_temperature\n```\nFor more information, check out the [SmartIR repo](https://github.com/smartHomeHub/SmartIR).\n\n# Dimensions\n\nThe board is remarkably compact, measuring just 5cm in diameter and 3.5cm in height without the enclosure. This small form factor makes it a perfect fit for any space. To put its size into perspective, it's smaller than the Broadlink RM3 Mini, which is the only device I have available for comparison.\n\n\n![](/assets/esp360/vs_broadlink.jpeg){width=5in fig-align=\"center\"}\n\n\n# Enclosure\n\nWithin this repository, you can also access the two STL files for the enclosure, which enables you to print it in your preferred color to match its intended location. The pre-designed enclosure includes openings near the USB-C port and two built-in sensors to optimize airflow and cool down the temperature sensor. The top part of the enclosure can be screwed on, so there's no need for additional screws or components. I've only tested printing with light-colored PLA, and the IR transmission was not impacted at all. However, I can't make any claims about other materials or dark colors.\n\n![](/assets/esp360/without_top.jpeg){fig-align=\"center\"}\n\n# OSHWA Certification\nIn the end, the project also has the OSHWA certification with UID IT000012, so it's completely open source!\n\n\n![](/assets/esp360/oshwa.jpeg){width=3in fig-align=\"center\"}\n\n# License\n\n![](/assets/esp360/license.jpg){width=2in fig-align=\"center\"}\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"esp360.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":{"light":"cosmo","dark":"darkly"},"title":"ESP 360 Remote","subtitle":"An all-in-one remote based on the ESP32-WROOM-32E","toc-location":"left","toc-expand":2,"smooth-scroll":true,"title-block-banner":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}